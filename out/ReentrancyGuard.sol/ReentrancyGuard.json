{"abi":[{"type":"error","name":"ReentrancyGuardReentrantCall","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-solidity/=lib/openzeppelin-contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\":{\"keccak256\":\"0x55c329217b55fc381f19a19007d6bcf279e3b58e9867d3e2b33f57fe8acb824b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ca5be47fdb89a89e69c8aee2eea7f27543009f95a46bb69bb65283afdaa327d\",\"dweb:/ipfs/QmVJjqVZsfQHEMRuJu6yaimvWooHu1fTW7xQwbc1gtKypw\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ReentrancyGuardReentrantCall"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-solidity/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":"ReentrancyGuard"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x55c329217b55fc381f19a19007d6bcf279e3b58e9867d3e2b33f57fe8acb824b","urls":["bzz-raw://2ca5be47fdb89a89e69c8aee2eea7f27543009f95a46bb69bb65283afdaa327d","dweb:/ipfs/QmVJjqVZsfQHEMRuJu6yaimvWooHu1fTW7xQwbc1gtKypw"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol","id":15306,"exportedSymbols":{"ReentrancyGuard":[15305]},"nodeType":"SourceUnit","src":"112:3212:82","nodes":[{"id":15238,"nodeType":"PragmaDirective","src":"112:24:82","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":15305,"nodeType":"ContractDefinition","src":"907:2415:82","nodes":[{"id":15242,"nodeType":"VariableDeclaration","src":"1707:40:82","nodes":[],"constant":true,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1732:11:82","scope":15305,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15240,"name":"uint256","nodeType":"ElementaryTypeName","src":"1707:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":15241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1746:1:82","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"id":15245,"nodeType":"VariableDeclaration","src":"1754:36:82","nodes":[],"constant":true,"mutability":"constant","name":"ENTERED","nameLocation":"1779:7:82","scope":15305,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15243,"name":"uint256","nodeType":"ElementaryTypeName","src":"1754:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":15244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1789:1:82","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"id":15247,"nodeType":"VariableDeclaration","src":"1799:23:82","nodes":[],"constant":false,"mutability":"mutable","name":"_status","nameLocation":"1815:7:82","scope":15305,"stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":15246,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"id":15250,"nodeType":"ErrorDefinition","src":"1891:37:82","nodes":[],"documentation":{"id":15248,"nodeType":"StructuredDocumentation","src":"1831:54:82","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","name":"ReentrancyGuardReentrantCall","nameLocation":"1897:28:82","parameters":{"id":15249,"nodeType":"ParameterList","parameters":[],"src":"1925:2:82"}},{"id":15258,"nodeType":"FunctionDefinition","src":"1936:54:82","nodes":[],"body":{"id":15257,"nodeType":"Block","src":"1950:40:82","nodes":[],"statements":[{"expression":{"id":15255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":15253,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15247,"src":"1961:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":15254,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15242,"src":"1971:11:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1961:21:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":15256,"nodeType":"ExpressionStatement","src":"1961:21:82"}]},"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","parameters":{"id":15251,"nodeType":"ParameterList","parameters":[],"src":"1947:2:82"},"returnParameters":{"id":15252,"nodeType":"ParameterList","parameters":[],"src":"1950:0:82"},"scope":15305,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"id":15269,"nodeType":"ModifierDefinition","src":"2376:107:82","nodes":[],"body":{"id":15268,"nodeType":"Block","src":"2400:83:82","nodes":[],"statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":15261,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15285,"src":"2411:19:82","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":15262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2411:21:82","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":15263,"nodeType":"ExpressionStatement","src":"2411:21:82"},{"id":15264,"nodeType":"PlaceholderStatement","src":"2443:1:82"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":15265,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15293,"src":"2455:18:82","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":15266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2455:20:82","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":15267,"nodeType":"ExpressionStatement","src":"2455:20:82"}]},"documentation":{"id":15259,"nodeType":"StructuredDocumentation","src":"1998:372:82","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"name":"nonReentrant","nameLocation":"2385:12:82","parameters":{"id":15260,"nodeType":"ParameterList","parameters":[],"src":"2397:2:82"},"virtual":false,"visibility":"internal"},{"id":15285,"nodeType":"FunctionDefinition","src":"2491:315:82","nodes":[],"body":{"id":15284,"nodeType":"Block","src":"2530:276:82","nodes":[],"statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":15274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":15272,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15247,"src":"2620:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":15273,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15245,"src":"2631:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2620:18:82","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":15279,"nodeType":"IfStatement","src":"2616:88:82","trueBody":{"id":15278,"nodeType":"Block","src":"2640:64:82","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":15275,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15250,"src":"2662:28:82","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":15276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2662:30:82","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":15277,"nodeType":"RevertStatement","src":"2655:37:82"}]}},{"expression":{"id":15282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":15280,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15247,"src":"2781:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":15281,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15245,"src":"2791:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2781:17:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":15283,"nodeType":"ExpressionStatement","src":"2781:17:82"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2500:19:82","parameters":{"id":15270,"nodeType":"ParameterList","parameters":[],"src":"2519:2:82"},"returnParameters":{"id":15271,"nodeType":"ParameterList","parameters":[],"src":"2530:0:82"},"scope":15305,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":15293,"nodeType":"FunctionDefinition","src":"2814:212:82","nodes":[],"body":{"id":15292,"nodeType":"Block","src":"2852:174:82","nodes":[],"statements":[{"expression":{"id":15290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":15288,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15247,"src":"2997:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":15289,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15242,"src":"3007:11:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2997:21:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":15291,"nodeType":"ExpressionStatement","src":"2997:21:82"}]},"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2823:18:82","parameters":{"id":15286,"nodeType":"ParameterList","parameters":[],"src":"2841:2:82"},"returnParameters":{"id":15287,"nodeType":"ParameterList","parameters":[],"src":"2852:0:82"},"scope":15305,"stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"id":15304,"nodeType":"FunctionDefinition","src":"3211:108:82","nodes":[],"body":{"id":15303,"nodeType":"Block","src":"3275:44:82","nodes":[],"statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":15301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":15299,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15247,"src":"3293:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":15300,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15245,"src":"3304:7:82","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3293:18:82","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":15298,"id":15302,"nodeType":"Return","src":"3286:25:82"}]},"documentation":{"id":15294,"nodeType":"StructuredDocumentation","src":"3034:171:82","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3220:23:82","parameters":{"id":15295,"nodeType":"ParameterList","parameters":[],"src":"3243:2:82"},"returnParameters":{"id":15298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15297,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":15304,"src":"3269:4:82","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":15296,"name":"bool","nodeType":"ElementaryTypeName","src":"3269:4:82","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3268:6:82"},"scope":15305,"stateMutability":"view","virtual":false,"visibility":"internal"}],"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":15239,"nodeType":"StructuredDocumentation","src":"140:765:82","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"linearizedBaseContracts":[15305],"name":"ReentrancyGuard","nameLocation":"925:15:82","scope":15306,"usedErrors":[15250],"usedEvents":[]}],"license":"MIT"},"id":82}